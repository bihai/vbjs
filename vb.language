start
    = module EOF
    / expression EOF

module = options func_defs

options = ( option )*
option = OPTION [^\r\n]* EOL

func_defs = ( func_def )*
func_def = FUNCTION uname args_spec func_body END FUNCTION
args_spec = left_bracket (uname ( comma uname )* )? right_bracket type_spec? on_error?
func_body = (call_statement)*
type_spec = AS uname
on_error = ONERROR GOTO uname

call_statement = callee call_args?
callee = uname (identifier_op uname)*
call_args = left_bracket (expression ( comma expression )* )? right_bracket

expression = concat_expr

concat_expr
    = add_expr (concat_op add_expr)*

add_expr
    = call_expr (plus_op call_expr)*

call_expr
    = lazy_call_expr
    / name left_bracket (expression ( comma expression )* )? right_bracket
    / value

lazy_call_expr
    = lazy_name left_bracket (lazy_value (comma lazy_value)* )? right_bracket

lazy_value
    = identifier
    / literal
    
value
    = identifier_expr
    / literal

identifier_expr
    = identifier (identifier_op identifier)*

_ = ( [ \t\r\n] / comment )*
__ = [ \t]*

comment = "'" [^\r\n]*

identifier = '[' name_in_brackets ']' __

name_in_brackets = [A-Za-z_][A-Za-z0-9_ ]*
name = [A-Za-z_][A-Za-z0-9_]* _
lazy_name = 'Sum'
literal = '"' literal_text '"' __
literal_text = [^"]*
concat_op = '&' __
plus_op = '+' __
left_bracket = '(' _
right_bracket = ')' _
comma = ',' __
identifier_op = '!' / '.'

uname = !(keyword ![A-Za-z0-9_]) uname_itself _
uname_itself = [A-Za-z_][A-Za-z0-9_]*
FUNCTION = 'Function' __
END = 'End' __
OPTION = 'Option' __
ONERROR = 'On' [ \t]+ 'Error' __
GOTO = 'GoTo' __
keyword
    = 'End'
    / 'Function'
AS = 'As' __

EOF = !.
EOL = [\r\n]+ / EOF
