start
    = module EOF
    / expression EOF

module = options func_defs

options = option*
option = OPTION [^\r\n]* EOL

func_defs = func_def*
func_def = FUNCTION uname args_spec func_body END FUNCTION
args_spec = left_bracket (uname (comma uname)* )? right_bracket type_spec? on_error?
func_body = statement*
type_spec = AS uname
on_error = ONERROR GOTO uname

statement
    = resume_statement
    / exit_statement
    / dim_statement
    / set_statement
    / if_statement
    / assign_statement
    / label_statement
    / call_statement
resume_statement = RESUME uname
exit_statement = EXIT FUNCTION
dim_statement = DIM uname AS uname
set_statement = (CONST / SET) uname EQUAL expression
if_statement = IF expression EQUAL expression THEN func_body ENDIF
assign_statement = uname EQUAL expression
label_statement = uname COLON
call_statement = callee call_args?
callee = uname (identifier_op uname)*
call_args = left_bracket (expression (comma expression)* )? right_bracket

expression = concat_expr

concat_expr
    = add_expr (concat_op add_expr)*

add_expr
    = call_expr (plus_op call_expr)*

call_expr
    = lazy_call_expr
    / name left_bracket (expression (comma expression)* )? right_bracket
    / value

lazy_call_expr
    = lazy_name left_bracket (lazy_value (comma lazy_value)* )? right_bracket

lazy_value
    = bracketed_identifier
    / literal
    
value
    = identifier_expr
    / literal
    / TRUE
    / FALSE
    / number

identifier_expr
    = identifier (identifier_op identifier)*

_ = ( [ \t\r\n] / comment )*
__ = [ \t]*

comment = "'" [^\r\n]*

identifier
    = bracketed_identifier
    / uname
bracketed_identifier = '[' name_in_brackets ']' __
name_in_brackets = [A-Za-z_][A-Za-z0-9_ ]*
name = [A-Za-z_][A-Za-z0-9_]* _

lazy_name = 'Sum'
literal = '"' literal_text '"' __
literal_text = [^"]*
concat_op = '&' __
plus_op = '+' __
left_bracket = '(' _
right_bracket = ')' _
comma = ',' __
identifier_op = '!' / '.'
number = [0-9]+ _

uname = !(keyword ![A-Za-z0-9_]) uname_itself _
uname_itself = [A-Za-z_][A-Za-z0-9_]*
FUNCTION = 'Function' _
END = 'End' __
OPTION = 'Option' __
ONERROR = 'On' [ \t]+ 'Error' __
GOTO = 'GoTo' __
RESUME = 'Resume' __
EXIT = 'Exit' __
DIM = 'Dim' __
CONST = 'Const' __
SET = 'Set' __
IF = 'If' __
THEN = 'Then' _
ENDIF = END IF _
EQUAL = '=' __
COLON = ':' _
TRUE = 'True' _
FALSE = 'False' _
keyword
    = 'End'
    / 'Function'
    / 'Then'
    / 'If'
    / 'Set'
    / 'Const'
AS = 'As' __

EOF = !.
EOL = [\r\n]+ / EOF
