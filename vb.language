start = module EOF
module = __ declarations func_defs

{{include common}}

declarations = declaration* _
declaration = (OPTION / ATTRIBUTE / DIM) [^\r\n]* EOS

func_defs = func_def*
func_def = func_start name args_spec statements func_end
func_start
    = PRIVATE? FUNCTION
    / PRIVATE? SUB
func_end
    = END FUNCTION __
    / END SUB __
args_spec = LEFT_PAREN (arg_spec (comma arg_spec)* )? RIGHT_PAREN type_spec? EOS
arg_spec = name type_spec?
statements = (single_line_statement / multiline_statement)*
type_spec = AS identifier_expr
on_error_statement = ONERROR (GOTO name / RESUME NEXT)

multiline_statement = (if_statement / with_statement / select_statement) EOS
single_line_statement = statement EOS
statement
    = resume_statement
    / exit_statement
    / goto_statement
    / on_error_statement
    / dim_statement
    / set_statement
    / single_line_if_statement
    / assign_statement
    / label_statement
    / call_statement
resume_statement = RESUME name
exit_statement = EXIT (FUNCTION / SUB)
goto_statement = GOTO name
dim_statement = (DIM / STATIC) name type_spec? (comma name type_spec?)*
set_statement = (CONST / SET) name EQUAL expression
with_statement = WITH expression EOS statements END WITH
if_statement = IF expression THEN EOS statements (ELSE EOS? statements)? ENDIF
single_line_if_statement = IF expression THEN statement
assign_statement = identifier_expr EQUAL expression
label_statement = name COLON

// [MS-VBAL] 5.4.2.10 Select Case Statement
select_statement
    = SELECT CASE expression EOS (case_clause / case_else_clause)* END SELECT
case_clause = CASE range_clause (comma range_clause)* EOS statements
case_else_clause = CASE ELSE EOS statements
range_clause
    = IS CMP_OP expression
    / expression TO expression
    / expression

// [MS-VBAL] 5.4.2.1 Call Statement
call_statement = callee call_args
callee = with_expression / name_expression
call_args = (expression (comma expression)*)?

with_expression = identifier_op name_expression
name_expression = name (index !(call_args EOS) / member)*
member = identifier_op unrestricted_name
index = LEFT_PAREN (expression (comma expression)* )? RIGHT_PAREN
unrestricted_name = bracketed_identifier / name_itself

// [MS-VBAL] 5.6.9.1 Operator Precedence and Associativity
expression = or_expr
or_expr = and_expr (OR and_expr)*
and_expr = not_expr (AND not_expr)*
not_expr = NOT? cmp_expr
cmp_expr = concat_expr (CMP_OP concat_expr)?

call_expr
    = braced_expression
    / value
    / plain_call_expr

identifier_expr
    = with_identifier_expr
    / identifier_expr_itself

// [MS-VBAL], 5.6.15 With Expressions
with_identifier_expr = identifier_op identifier_expr_itself

name
    = !(keyword ![A-Za-z0-9_]) name_itself
    / bracketed_identifier

// optional whitespace
_ = ([ \t] / line_continuation)*

// greedy whitespace (eats new lines)
__ = ([ \t\r\n] / comment)*

comment = _ "'" [^\r\n]* EOL
line_continuation = '_' _ EOL

EOS = (!('_' _) EOL _ / comment _)+

// '\n' \u000A LINE FEED
// '\r' \u000D CARRIAGE RETURN
// <LS> \u2028 LINE SEPARATOR
// <PS> \u2029 PARAGRAPH SEPARATOR
EOL = "\n" / "\r\n" / "\u2028" / "\u2029" / "\r" / EOF

FUNCTION = 'Function' _
SUB = 'Sub' _
PRIVATE = 'Private' _
END = 'End' _
OPTION = 'Option' _
ATTRIBUTE = 'Attribute' _
ONERROR = 'On' [ \t]+ 'Error' _
GOTO = 'GoTo' _
RESUME = 'Resume' _
EXIT = 'Exit' _
NEXT = 'Next' _
DIM = 'Dim' _
STATIC = 'Static' _
CONST = 'Const' _
SET = 'Set' _
IF = 'If' _
THEN = 'Then' _
ELSE = 'Else' _
ENDIF = END IF _
SELECT = 'Select' _
CASE = 'Case' _
TO = 'To' _
IS = 'Is' _
EQUAL = '=' _

// [MS-VBAL] 5.6.9.5 Relational Operators
CMP_OP = ('=' / '<>' / '><' / '<=' / '<' / '>=' / '>' ) _

NOT = 'Not' _
COLON = ':' _
OR = 'Or' _
AND = 'And' _
WITH = 'With' _
keyword
    = 'End'
    / 'Function'
    / 'Sub'
    / 'Private'
    / 'If'
    / 'Then'
    / 'Else'
    / 'Set'
    / 'Const'
    / 'Or'
    / 'And'
    / 'Dim'
    / 'Static'
    / 'GoTo'
    / 'Option'
    / 'Attribute'
    / 'Not'
    / 'With'
    / 'Case'
    / 'Select'
    / 'To'
    / 'Is'
AS = 'As' _
